{"version":3,"sources":["serviceWorker.js","components/ContentContainer.js","components/UploadButton.js","components/App.js","index.js","logo.svg"],"names":["Boolean","window","location","hostname","match","ContentContainer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","_this$props","id","className","hidden","content","react_default","a","createElement","Component","UploadButton","onChange","htmlFor","style","display","type","name","Button_default","variant","component","Parser","require","j2xParser","App","xmlContentHidden","jsonContentHidden","xmlContent","jsonContent","clearData","bind","assertThisInitialized","generateJSON","generateXML","readFile","xmlElementContent","isValid","xmlParser","validate","alert","concat","err","msg","tObj","getTraversalObj","jsonObjConverted","convertToJson","setState","JSON","stringify","jsonElementContent","jsonParser","format","indentBy","parse","error","message","e","_this2","file","target","files","reader","FileReader","onload","g","result","readAsText","_this3","src","logo","alt","components_UploadButton","color","onClick","components_ContentContainer","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.39d28f1b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\n\nimport PropTypes from 'prop-types';\n\nclass ContentContainer extends Component {\n  static propTypes = {\n    id: PropTypes.string.isRequired,\n    className: PropTypes.string.isRequired,\n    hidden: PropTypes.bool.isRequired,\n    content: PropTypes.string.isRequired\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n    };\n  }\n\n  render() {\n    const { id, className, hidden, content } = this.props;\n    return (\n      <pre\n        id={id}\n        className={className}\n        hidden={hidden}\n      >\n        {content}\n      </pre>\n    );\n  }\n}\n\nexport default ContentContainer;\n","import React, { Component } from 'react';\n\nimport Button from '@material-ui/core/Button';\nimport PropTypes from 'prop-types';\n\nclass UploadButton extends Component {\n  static propTypes = {\n    id: PropTypes.string.isRequired,\n    className: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n    };\n  }\n\n  render() {\n    const { id, className, onChange } = this.props;\n    return (\n      <label id=\"file-select\" htmlFor={id}>\n        <input\n          style={{ display: 'none' }}\n          id={id}\n          type=\"file\"\n          name={className}\n          onChange={onChange}\n        />\n        <Button variant=\"contained\" component=\"span\">Upload File</Button>\n      </label>\n    );\n  }\n}\n\nexport default UploadButton;\n","import '../App.css';\n\nimport React, { Component } from 'react';\n\nimport Button from '@material-ui/core/Button';\nimport ContentContainer from './ContentContainer';\nimport UploadButton from './UploadButton';\nimport logo from '../logo.svg';\nimport xmlParser from 'fast-xml-parser';\n\nconst Parser = require('fast-xml-parser').j2xParser;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      xmlContentHidden: true,\n      jsonContentHidden: true,\n      xmlContent: '',\n      jsonContent: ''\n    };\n\n    this.clearData = this.clearData.bind(this);\n    this.generateJSON = this.generateJSON.bind(this);\n    this.generateXML = this.generateXML.bind(this);\n    this.readFile = this.readFile.bind(this);\n  }\n\n  generateJSON() {\n    const xmlElementContent = this.state.xmlContent;\n    const isValid = xmlParser.validate(xmlElementContent);\n\n    if (xmlElementContent === '') {\n      alert('Select an xml document');\n    } else if (isValid !== true) {\n      alert(`Invalid XML: ${isValid.err.msg}`);\n    } else {\n      const tObj = xmlParser.getTraversalObj(xmlElementContent);\n      const jsonObjConverted = xmlParser.convertToJson(tObj);\n\n      this.setState(() => ({\n        jsonContentHidden: false,\n        jsonContent: JSON.stringify(jsonObjConverted, null, 2)\n      }));\n    }\n  }\n\n  generateXML() {\n    const jsonElementContent = this.state.jsonContent;\n\n    if (jsonElementContent === '') {\n      alert('Select a json document');\n      return;\n    }\n\n    const jsonParser = new Parser({\n      format: true,\n      indentBy: '  '\n    });\n\n    try {\n      this.setState(() => ({\n        xmlContentHidden: false,\n        xmlContent: jsonParser.parse(JSON.parse(jsonElementContent))\n      }));\n    } catch (error) {\n      alert(`Unable to generate json: ${error.message}`);\n    }\n  }\n\n  readFile(e) {\n    const file = e.target.files[0];\n    if (!file) return;\n    if (file.type === 'application/json') {\n      const reader = new FileReader();\n      reader.onload = (g) => {\n        this.setState(() => ({\n          jsonContentHidden: false,\n          jsonContent: g.target.result\n        }));\n      };\n      reader.readAsText(file);\n    } else if (file.type === 'text/xml') {\n      const reader = new FileReader();\n      reader.onload = (g) => {\n        this.setState(() => ({\n          xmlContentHidden: false,\n          xmlContent: g.target.result\n        }));\n      };\n      reader.readAsText(file);\n    } else {\n      alert('File must be xml or json');\n    }\n  }\n\n  clearData() {\n    this.setState(() => ({\n      xmlContentHidden: true,\n      jsonContentHidden: true,\n      xmlContent: '',\n      jsonContent: ''\n    }));\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <UploadButton id=\"contained-button-file\" className=\"upload-button\" onChange={e => this.readFile(e)} />\n          <div id=\"generation-container\">\n            <Button id=\"generate-json\" variant=\"contained\" color=\"primary\" onClick={() => this.generateJSON()}>Generate JSON</Button>\n            <Button id=\"generate-xml\" variant=\"contained\" color=\"primary\" onClick={() => this.generateXML()}>Generate XML</Button>\n          </div>\n          <Button id=\"clear-button\" variant=\"contained\" color=\"secondary\" onClick={() => this.clearData()}>Clear Data</Button>\n        </header>\n        <ContentContainer\n          id=\"xml-file-content\"\n          className=\"file-content\"\n          hidden={this.state.xmlContentHidden}\n          content={this.state.xmlContent}\n        />\n        <ContentContainer\n          id=\"json-file-content\"\n          className=\"file-content\"\n          hidden={this.state.jsonContentHidden}\n          content={this.state.jsonContent}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import './index.css';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './components/App';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}
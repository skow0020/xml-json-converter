{"version":3,"sources":["serviceWorker.js","App.js","index.js","logo.svg"],"names":["Boolean","window","location","hostname","match","Parser","require","j2xParser","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","xmlContentHidden","jsonContentHidden","xmlContent","jsonContent","clearData","bind","assertThisInitialized","generateJSON","generateXML","readFile","xmlElementContent","isValid","xmlParser","validate","alert","concat","err","msg","tObj","getTraversalObj","jsonObjConverted","convertToJson","setState","JSON","stringify","jsonElementContent","jsonParser","format","indentBy","parse","error","message","e","_this2","file","target","files","type","reader","FileReader","onload","g","result","readAsText","_this3","react_default","a","createElement","className","src","logo","alt","id","htmlFor","style","display","name","inputName","onChange","Button_default","variant","component","color","onClick","hidden","Component","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.77703684.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import './App.css';\n\nimport React, { Component } from 'react';\n\nimport Button from '@material-ui/core/Button';\nimport logo from './logo.svg';\nimport xmlParser from 'fast-xml-parser';\n\nconst Parser = require('fast-xml-parser').j2xParser;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      xmlContentHidden: true,\n      jsonContentHidden: true,\n      xmlContent: '',\n      jsonContent: ''\n    };\n\n    this.clearData = this.clearData.bind(this);\n    this.generateJSON = this.generateJSON.bind(this);\n    this.generateXML = this.generateXML.bind(this);\n    this.readFile = this.readFile.bind(this);\n  }\n\n  generateJSON() {\n    const xmlElementContent = this.state.xmlContent;\n    const isValid = xmlParser.validate(xmlElementContent);\n\n    if (xmlElementContent === '') {\n      alert('Select an xml document');\n    } else if (isValid !== true) {\n      alert(`Invalid XML: ${isValid.err.msg}`);\n    } else {\n      const tObj = xmlParser.getTraversalObj(xmlElementContent);\n      const jsonObjConverted = xmlParser.convertToJson(tObj);\n\n      this.setState(() => ({\n        jsonContentHidden: false,\n        jsonContent: JSON.stringify(jsonObjConverted, null, 2)\n      }));\n    }\n  }\n\n  generateXML() {\n    const jsonElementContent = this.state.jsonContent;\n\n    if (jsonElementContent === '') {\n      alert('Select a json document');\n      return;\n    }\n\n    const jsonParser = new Parser({\n      format: true,\n      indentBy: '  '\n    });\n\n    try {\n      this.setState(() => ({\n        xmlContentHidden: false,\n        xmlContent: jsonParser.parse(JSON.parse(jsonElementContent))\n      }));\n    } catch (error) {\n      alert(`Unable to generate json: ${error.message}`);\n    }\n  }\n\n  readFile(e) {\n    const file = e.target.files[0];\n    if (!file) return;\n    if (file.type === 'application/json') {\n      const reader = new FileReader();\n      reader.onload = (g) => {\n        this.setState(() => ({\n          jsonContentHidden: false,\n          jsonContent: g.target.result\n        }));\n      };\n      reader.readAsText(file);\n    } else if (file.type === 'text/xml') {\n      const reader = new FileReader();\n      reader.onload = (g) => {\n        this.setState(() => ({\n          xmlContentHidden: false,\n          xmlContent: g.target.result\n        }));\n      };\n      reader.readAsText(file);\n    } else {\n      alert('File must be xml or json');\n    }\n  }\n\n  clearData() {\n    this.setState(() => ({\n      xmlContentHidden: true,\n      jsonContentHidden: true,\n      xmlContent: '',\n      jsonContent: ''\n    }));\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <label id=\"file-select\" htmlFor=\"contained-button-file\">\n            <input\n              style={{ display: 'none' }}\n              id=\"contained-button-file\"\n              type=\"file\"\n              name={this.state.inputName}\n              onChange={e => this.readFile(e)}\n            />\n            <Button variant=\"contained\" component=\"span\">\n              Upload File\n            </Button>\n          </label>\n\n          <div id=\"container\">\n            <Button id=\"generate-json\" variant=\"contained\" color=\"primary\" onClick={() => this.generateJSON()}>\n              Generate JSON\n            </Button>\n            <Button id=\"generate-xml\" variant=\"contained\" color=\"primary\" onClick={() => this.generateXML()}>\n              Generate XML\n            </Button>\n          </div>\n          <Button id=\"clear-button\" variant=\"contained\" color=\"secondary\" onClick={() => this.clearData()}>\n            Clear Data\n          </Button>\n        </header>\n        <div className=\"content-container\">\n          <pre\n            id=\"xml-file-content\"\n            className=\"file-content\"\n            hidden={this.state.xmlContentHidden}\n          >\n            {this.state.xmlContent}\n          </pre>\n          <pre\n            id=\"json-file-content\"\n            className=\"file-content\"\n            hidden={this.state.jsonContentHidden}\n          >\n            {this.state.jsonContent}\n          </pre>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import './index.css';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './App';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}
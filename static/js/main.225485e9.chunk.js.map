{"version":3,"sources":["serviceWorker.js","components/SimpleSnackbar.js","components/ContentContainer.js","components/UploadButton.js","components/App.js","index.js","logo.svg"],"names":["Boolean","window","location","hostname","match","openSnackbarFn","SimpleSnackbar","state","open","message","openSnackbar","_ref","_this","setState","handleClose","event","reason","this","react_default","a","createElement","id","dangerouslySetInnerHTML","__html","Snackbar_default","anchorOrigin","vertical","horizontal","autoHideDuration","onClose","ContentProps","aria-describedby","action","IconButton_default","key","aria-label","color","onClick","Close_default","React","Component","withStyles","theme","close","padding","spacing","unit","ContentContainer","props","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","_this$props","className","hidden","content","UploadButton","onChange","htmlFor","style","display","type","name","Button_default","variant","component","Parser","require","j2xParser","App","showNotifier","_ref2","xmlContentHidden","jsonContentHidden","xmlContent","jsonContent","clearData","bind","assertThisInitialized","generateJSON","generateXML","readFile","xmlElementContent","isValid","xmlParser","validate","concat","err","msg","tObj","getTraversalObj","jsonObjConverted","convertToJson","JSON","stringify","jsonElementContent","jsonParser","format","indentBy","parse","error","e","_this2","file","target","files","reader","FileReader","onload","g","result","readAsText","_this3","src","logo","alt","components_UploadButton","components_SimpleSnackbar","components_ContentContainer","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"uGAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,+DCNFC,qIAEEC,6MACJC,MAAQ,CACNC,MAAM,EACNC,QAAS,MAOXC,aAAe,SAAAC,GAAiB,IAAdF,EAAcE,EAAdF,QAChBG,EAAKC,SAAS,CACZL,MAAM,EACNC,eAIJK,YAAc,SAACC,EAAOC,GACL,cAAXA,GAIJJ,EAAKC,SAAS,CACZL,MAAM,EACNC,QAAS,yFAjBXJ,EAAiBY,KAAKP,8CAsBtB,IAAMD,EACJS,EAAAC,EAAAC,cAAA,QACEC,GAAG,sBACHC,wBAAyB,CAAEC,OAAQN,KAAKV,MAAME,WAGlD,OACES,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACI,EAAAL,EAAD,CACEM,aAAc,CACZC,SAAU,SACVC,WAAY,QAEdnB,KAAMS,KAAKV,MAAMC,KACjBoB,iBAAkB,IAClBC,QAASZ,KAAKH,YACdgB,aAAc,CACZC,mBAAoB,cAEtBtB,QAASA,EACTuB,OAAQ,CACNd,EAAAC,EAAAC,cAACa,EAAAd,EAAD,CACEe,IAAI,QACJC,aAAW,QACXC,MAAM,UACNC,QAASpB,KAAKH,aAEdI,EAAAC,EAAAC,cAACkB,EAAAnB,EAAD,kBAxDeoB,IAAMC,WAqEpBC,2BA7EA,SAAAC,GAAK,MAAK,CACvBC,MAAO,CACLC,QAASF,EAAMG,QAAQC,KAAO,KA2EnBL,CAAmBnC,oBCnDnByC,cApBb,SAAAA,EAAYC,GAAO,IAAApC,EAAA,OAAAqC,OAAAC,EAAA,EAAAD,CAAAhC,KAAA8B,IACjBnC,EAAAqC,OAAAE,EAAA,EAAAF,CAAAhC,KAAAgC,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAApC,KAAM+B,KACDzC,MAAQ,GAFIK,wEAMV,IAAA0C,EACoCrC,KAAK+B,MAAxC3B,EADDiC,EACCjC,GAAIkC,EADLD,EACKC,UAAWC,EADhBF,EACgBE,OAAQC,EADxBH,EACwBG,QAC/B,OACEvC,EAAAC,EAAAC,cAAA,OACEC,GAAIA,EACJkC,UAAWA,EACXC,OAAQA,GAEPC,UAtBsBjB,aC+BhBkB,cAvBb,SAAAA,EAAYV,GAAO,IAAApC,EAAA,OAAAqC,OAAAC,EAAA,EAAAD,CAAAhC,KAAAyC,IACjB9C,EAAAqC,OAAAE,EAAA,EAAAF,CAAAhC,KAAAgC,OAAAG,EAAA,EAAAH,CAAAS,GAAAL,KAAApC,KAAM+B,KACDzC,MAAQ,GAFIK,wEAMV,IAAA0C,EAC6BrC,KAAK+B,MAAjC3B,EADDiC,EACCjC,GAAIkC,EADLD,EACKC,UAAWI,EADhBL,EACgBK,SACvB,OACEzC,EAAAC,EAAAC,cAAA,SAAOC,GAAG,cAAcuC,QAASvC,GAC/BH,EAAAC,EAAAC,cAAA,SACEyC,MAAO,CAAEC,QAAS,QAClBzC,GAAIA,EACJ0C,KAAK,OACLC,KAAMT,EACNI,SAAUA,IAEZzC,EAAAC,EAAAC,cAAC6C,EAAA9C,EAAD,CAAQ+C,QAAQ,YAAYC,UAAU,QAAtC,uBAxBmB3B,+CCMrB4B,EAASC,EAAQ,IAAmBC,UAiI3BC,cA9Hb,SAAAA,EAAYvB,GAAO,IAAApC,EAAA,OAAAqC,OAAAC,EAAA,EAAAD,CAAAhC,KAAAsD,IACjB3D,EAAAqC,OAAAE,EAAA,EAAAF,CAAAhC,KAAAgC,OAAAG,EAAA,EAAAH,CAAAsB,GAAAlB,KAAApC,KAAM+B,KAcRwB,aAAe,SAAC/D,IHkDX,SAAAgE,GAAmC,IAAXhE,EAAWgE,EAAXhE,QAC7BJ,EAAe,CAAEI,YGlDfC,CAAa,CAAED,aAdfG,EAAKL,MAAQ,CACXmE,kBAAkB,EAClBC,mBAAmB,EACnBC,WAAY,GACZC,YAAa,IAGfjE,EAAKkE,UAAYlE,EAAKkE,UAAUC,KAAf9B,OAAA+B,EAAA,EAAA/B,QAAA+B,EAAA,EAAA/B,CAAArC,KACjBA,EAAKqE,aAAerE,EAAKqE,aAAaF,KAAlB9B,OAAA+B,EAAA,EAAA/B,QAAA+B,EAAA,EAAA/B,CAAArC,KACpBA,EAAKsE,YAActE,EAAKsE,YAAYH,KAAjB9B,OAAA+B,EAAA,EAAA/B,QAAA+B,EAAA,EAAA/B,CAAArC,KACnBA,EAAKuE,SAAWvE,EAAKuE,SAASJ,KAAd9B,OAAA+B,EAAA,EAAA/B,QAAA+B,EAAA,EAAA/B,CAAArC,KAZCA,8EAoBjB,IAAMwE,EAAoBnE,KAAKV,MAAMqE,WAC/BS,EAAUC,IAAUC,SAASH,GAEnC,GAA0B,KAAtBA,EACFnE,KAAKuD,aAAa,+BACb,IAAgB,IAAZa,EACTpE,KAAKuD,aAAL,gBAAAgB,OAAkCH,EAAQI,IAAIC,UACzC,CACL,IAAMC,EAAOL,IAAUM,gBAAgBR,GACjCS,EAAmBP,IAAUQ,cAAcH,GAEjD1E,KAAKJ,SAAS,iBAAO,CACnB8D,mBAAmB,EACnBE,YAAakB,KAAKC,UAAUH,EAAkB,KAAM,6CAMxD,IAAMI,EAAqBhF,KAAKV,MAAMsE,YAEtC,GAA2B,KAAvBoB,EAAJ,CAKA,IAAMC,EAAa,IAAI9B,EAAO,CAC5B+B,QAAQ,EACRC,SAAU,OAGZ,IACEnF,KAAKJ,SAAS,iBAAO,CACnB6D,kBAAkB,EAClBE,WAAYsB,EAAWG,MAAMN,KAAKM,MAAMJ,OAE1C,MAAOK,GACPrF,KAAKuD,aAAL,4BAAAgB,OAA8Cc,EAAM7F,gBAfpDQ,KAAKuD,aAAa,2DAmBb+B,GAAG,IAAAC,EAAAvF,KACJwF,EAAOF,EAAEG,OAAOC,MAAM,GAC5B,GAAKF,EACL,GAAkB,qBAAdA,EAAK1C,KAA6B,CACpC,IAAM6C,EAAS,IAAIC,WACnBD,EAAOE,OAAS,SAACC,GACfP,EAAK3F,SAAS,iBAAO,CACnB8D,mBAAmB,EACnBE,YAAakC,EAAEL,OAAOM,WAG1BJ,EAAOK,WAAWR,QACb,GAAkB,aAAdA,EAAK1C,KAAqB,CACnC,IAAM6C,EAAS,IAAIC,WACnBD,EAAOE,OAAS,SAACC,GACfP,EAAK3F,SAAS,iBAAO,CACnB6D,kBAAkB,EAClBE,WAAYmC,EAAEL,OAAOM,WAGzBJ,EAAOK,WAAWR,QAElBxF,KAAKuD,aAAa,gEAKpBvD,KAAKJ,SAAS,iBAAO,CACnB6D,kBAAkB,EAClBC,mBAAmB,EACnBC,WAAY,GACZC,YAAa,uCAIR,IAAAqC,EAAAjG,KACP,OACEC,EAAAC,EAAAC,cAAA,OAAKmC,UAAU,OACbrC,EAAAC,EAAAC,cAAA,UAAQmC,UAAU,cAChBrC,EAAAC,EAAAC,cAAA,OAAK+F,IAAKC,IAAM7D,UAAU,WAAW8D,IAAI,SACzCnG,EAAAC,EAAAC,cAACkG,EAAD,CAAcjG,GAAG,wBAAwBkC,UAAU,gBAAgBI,SAAU,SAAA4C,GAAC,OAAIW,EAAK/B,SAASoB,MAChGrF,EAAAC,EAAAC,cAAA,OAAKC,GAAG,wBACNH,EAAAC,EAAAC,cAAC6C,EAAA9C,EAAD,CAAQE,GAAG,gBAAgB6C,QAAQ,YAAY9B,MAAM,UAAUC,QAAS,kBAAM6E,EAAKjC,iBAAnF,iBACA/D,EAAAC,EAAAC,cAAC6C,EAAA9C,EAAD,CAAQE,GAAG,eAAe6C,QAAQ,YAAY9B,MAAM,UAAUC,QAAS,kBAAM6E,EAAKhC,gBAAlF,iBAEFhE,EAAAC,EAAAC,cAAC6C,EAAA9C,EAAD,CAAQE,GAAG,eAAe6C,QAAQ,YAAY9B,MAAM,YAAYC,QAAS,kBAAM6E,EAAKpC,cAApF,eAEF5D,EAAAC,EAAAC,cAACmG,EAAD,MACArG,EAAAC,EAAAC,cAACoG,EAAD,CACEnG,GAAG,mBACHkC,UAAU,eACVC,OAAQvC,KAAKV,MAAMmE,iBACnBjB,QAASxC,KAAKV,MAAMqE,aAEtB1D,EAAAC,EAAAC,cAACoG,EAAD,CACEnG,GAAG,oBACHkC,UAAU,eACVC,OAAQvC,KAAKV,MAAMoE,kBACnBlB,QAASxC,KAAKV,MAAMsE,sBAxHZrC,4BCLlBiF,EAASC,OAAOxG,EAAAC,EAAAC,cAACuG,EAAD,MAASC,SAASC,eAAe,SLyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,mCMnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.225485e9.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import CloseIcon from '@material-ui/icons/Close';\nimport IconButton from '@material-ui/core/IconButton';\nimport React from 'react';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst styles = theme => ({\n  close: {\n    padding: theme.spacing.unit / 2\n  }\n});\n\nlet openSnackbarFn;\n\nclass SimpleSnackbar extends React.Component {\n  state = {\n    open: false,\n    message: ''\n  };\n\n  componentDidMount() {\n    openSnackbarFn = this.openSnackbar;\n  }\n\n  openSnackbar = ({ message }) => {\n    this.setState({\n      open: true,\n      message\n    });\n  };\n\n  handleClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    this.setState({\n      open: false,\n      message: ''\n    });\n  };\n\n  render() {\n    const message = (\n      <span\n        id=\"snackbar-message-id\"\n        dangerouslySetInnerHTML={{ __html: this.state.message }}\n      />\n    );\n    return (\n      <div>\n        <Snackbar\n          anchorOrigin={{\n            vertical: 'bottom',\n            horizontal: 'left'\n          }}\n          open={this.state.open}\n          autoHideDuration={2000}\n          onClose={this.handleClose}\n          ContentProps={{\n            'aria-describedby': 'message-id'\n          }}\n          message={message}\n          action={[\n            <IconButton\n              key=\"close\"\n              aria-label=\"Close\"\n              color=\"inherit\"\n              onClick={this.handleClose}\n            >\n              <CloseIcon />\n            </IconButton>\n          ]}\n        />\n      </div>\n    );\n  }\n}\n\nexport function openSnackbar({ message }) {\n  openSnackbarFn({ message });\n}\n\nexport default withStyles(styles)(SimpleSnackbar);\n","import React, { Component } from 'react';\n\nimport PropTypes from 'prop-types';\n\nclass ContentContainer extends Component {\n  static propTypes = {\n    id: PropTypes.string.isRequired,\n    className: PropTypes.string.isRequired,\n    hidden: PropTypes.bool.isRequired,\n    content: PropTypes.string.isRequired\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n    };\n  }\n\n  render() {\n    const { id, className, hidden, content } = this.props;\n    return (\n      <pre\n        id={id}\n        className={className}\n        hidden={hidden}\n      >\n        {content}\n      </pre>\n    );\n  }\n}\n\nexport default ContentContainer;\n","import React, { Component } from 'react';\n\nimport Button from '@material-ui/core/Button';\nimport PropTypes from 'prop-types';\n\nclass UploadButton extends Component {\n  static propTypes = {\n    id: PropTypes.string.isRequired,\n    className: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n    };\n  }\n\n  render() {\n    const { id, className, onChange } = this.props;\n    return (\n      <label id=\"file-select\" htmlFor={id}>\n        <input\n          style={{ display: 'none' }}\n          id={id}\n          type=\"file\"\n          name={className}\n          onChange={onChange}\n        />\n        <Button variant=\"contained\" component=\"span\">Upload File</Button>\n      </label>\n    );\n  }\n}\n\nexport default UploadButton;\n","import '../App.css';\n\nimport React, { Component } from 'react';\nimport SimpleSnackbar, { openSnackbar } from './SimpleSnackbar';\n\nimport Button from '@material-ui/core/Button';\nimport ContentContainer from './ContentContainer';\nimport UploadButton from './UploadButton';\nimport logo from '../logo.svg';\nimport xmlParser from 'fast-xml-parser';\n\nconst Parser = require('fast-xml-parser').j2xParser;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      xmlContentHidden: true,\n      jsonContentHidden: true,\n      xmlContent: '',\n      jsonContent: ''\n    };\n\n    this.clearData = this.clearData.bind(this);\n    this.generateJSON = this.generateJSON.bind(this);\n    this.generateXML = this.generateXML.bind(this);\n    this.readFile = this.readFile.bind(this);\n  }\n\n  showNotifier = (message) => {\n    openSnackbar({ message });\n  }\n\n  generateJSON() {\n    const xmlElementContent = this.state.xmlContent;\n    const isValid = xmlParser.validate(xmlElementContent);\n\n    if (xmlElementContent === '') {\n      this.showNotifier('Select an XML document');\n    } else if (isValid !== true) {\n      this.showNotifier(`Invalid XML: ${isValid.err.msg}`);\n    } else {\n      const tObj = xmlParser.getTraversalObj(xmlElementContent);\n      const jsonObjConverted = xmlParser.convertToJson(tObj);\n\n      this.setState(() => ({\n        jsonContentHidden: false,\n        jsonContent: JSON.stringify(jsonObjConverted, null, 2)\n      }));\n    }\n  }\n\n  generateXML() {\n    const jsonElementContent = this.state.jsonContent;\n\n    if (jsonElementContent === '') {\n      this.showNotifier('Select a JSON Document');\n      return;\n    }\n\n    const jsonParser = new Parser({\n      format: true,\n      indentBy: '  '\n    });\n\n    try {\n      this.setState(() => ({\n        xmlContentHidden: false,\n        xmlContent: jsonParser.parse(JSON.parse(jsonElementContent))\n      }));\n    } catch (error) {\n      this.showNotifier(`Unable to generate json: ${error.message}`);\n    }\n  }\n\n  readFile(e) {\n    const file = e.target.files[0];\n    if (!file) return;\n    if (file.type === 'application/json') {\n      const reader = new FileReader();\n      reader.onload = (g) => {\n        this.setState(() => ({\n          jsonContentHidden: false,\n          jsonContent: g.target.result\n        }));\n      };\n      reader.readAsText(file);\n    } else if (file.type === 'text/xml') {\n      const reader = new FileReader();\n      reader.onload = (g) => {\n        this.setState(() => ({\n          xmlContentHidden: false,\n          xmlContent: g.target.result\n        }));\n      };\n      reader.readAsText(file);\n    } else {\n      this.showNotifier('File must be xml or json');\n    }\n  }\n\n  clearData() {\n    this.setState(() => ({\n      xmlContentHidden: true,\n      jsonContentHidden: true,\n      xmlContent: '',\n      jsonContent: ''\n    }));\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <UploadButton id=\"contained-button-file\" className=\"upload-button\" onChange={e => this.readFile(e)} />\n          <div id=\"generation-container\">\n            <Button id=\"generate-json\" variant=\"contained\" color=\"primary\" onClick={() => this.generateJSON()}>Generate JSON</Button>\n            <Button id=\"generate-xml\" variant=\"contained\" color=\"primary\" onClick={() => this.generateXML()}>Generate XML</Button>\n          </div>\n          <Button id=\"clear-button\" variant=\"contained\" color=\"secondary\" onClick={() => this.clearData()}>Clear Data</Button>\n        </header>\n        <SimpleSnackbar />\n        <ContentContainer\n          id=\"xml-file-content\"\n          className=\"file-content\"\n          hidden={this.state.xmlContentHidden}\n          content={this.state.xmlContent}\n        />\n        <ContentContainer\n          id=\"json-file-content\"\n          className=\"file-content\"\n          hidden={this.state.jsonContentHidden}\n          content={this.state.jsonContent}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import './index.css';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './components/App';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}